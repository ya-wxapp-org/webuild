#!/usr/bin/env node

function log(message) {
  process.stdout.write(`[${process.pid}]: ${message}\n`);
}

log("start");

process
  .on("exit", function(code) {
    log(`exit with code ${code}`);
  })
  .on("uncaughtException", function(err) {
    console.log("Error caught in uncaughtException event:", err);
  })
  .on("unhandledRejection", function(p, reason) {
    console.error("Unhandled Rejection at:", p, "reason:", reason);
  });

process.on("SIGINT", signalHandler);

// for windows signal
// when type <Ctrl>+<Break>
process.on("SIGBREAK", signalHandler);
// when close the terminal
process.on("SIGHUP", signalHandler);

function signalHandler(signal) {
  signal && log(`Received signal: ${signal}.`);
  process.exit(0);
}

const path = require("path");
const program = require("caporal");
const fs = require("fs-extra");
const pkg = require("../package.json");
const CONFIG = require("../src/config")();

const paths = CONFIG.paths;

// 可用的编译类型
const availableTypes = {
  wechat: 1,
  alipay: 1
};

const p = program.version(pkg.version).description(pkg.description);

p
  .command("init")
  .argument("<name>")
  .description("初始化一个新项目")
  .action(function(argv) {
    fs.copy(
      path.join(__dirname, "../", "template"),
      path.join(process.cwd(), argv.name)
    );
  });

p
  .command("dev")
  .option("--src <dir>", "源码目录", program.STRING, "src")
  .option("--output <dir>", "输出目录", program.STRING, "dist")
  .option(
    "--type <type>",
    "微信(wechat)/支付宝(alipay)",
    program.STRING,
    "wechat"
  )
  .description("以开发模式运行")
  .action(function(argv, options) {
    process.env.NODE_ENV = "development";
    CONFIG.isProduction = false;
    CONFIG.type = options.type;
    CONFIG.paths.cwd = process.cwd();
    CONFIG.paths.src = path.join(CONFIG.paths.cwd, options.src);
    CONFIG.paths.dist = path.join(CONFIG.paths.cwd, options.output);

    if (!availableTypes[CONFIG.type]) {
      throw new Error(`Invalid compiler ${CONFIG.type}`);
    }

    const app = require("../src/app");

    app.dev().catch(err => {
      console.error(err);
    });
  });

p
  .command("build")
  .option("--src <dir>", "源码目录", program.STRING, "src")
  .option("--output <dir>", "输出目录", program.STRING, "dist")
  .option(
    "--type <type>",
    "微信(wechat)/支付宝(alipay)",
    program.STRING,
    "wechat"
  )
  .description("构建生产模式")
  .action(function(argv, options) {
    process.env.NODE_ENV = "production";
    CONFIG.isProduction = true;
    CONFIG.type = options.type;
    CONFIG.paths.cwd = process.cwd();
    CONFIG.paths.src = path.join(CONFIG.paths.cwd, options.src);
    CONFIG.paths.dist = path.join(CONFIG.paths.cwd, options.output);

    if (!availableTypes[CONFIG.type]) {
      throw new Error(`Invalid compiler ${CONFIG.type}`);
    }

    const app = require("../src/app");

    app
      .build()
      .then(() => {
        console.log("build success!");
      })
      .catch(function(err) {
        console.error(err);
      });
  });

p.parse(process.argv);
